version: '3'

services:
  cypress:
    build:
      context: .
      dockerfile: codeship/dockerfiles/Front-End-Dockerfile
      args:
        BRANCH: "{{ .Branch }}"
      encrypted_args_file: codeship/encrypted-arg-files/build-args.encrypted
    encrypted_env_file: ./codeship/encrypted-env-files/front-end-env.encrypted
    depends_on:
      - react
    entrypoint: ["sh", "./codeship/entrypoints/cypress-entrypoint.sh"]

  react:
    build:
      context: .
      dockerfile: codeship/dockerfiles/Front-End-Dockerfile
      args:
        BRANCH: "{{ .Branch }}"
      encrypted_args_file: codeship/encrypted-arg-files/build-args.encrypted
    encrypted_env_file: ./codeship/encrypted-env-files/front-end-env.encrypted
    depends_on:
      - api
    ports:
      - 3000
    entrypoint: ["sh", "./codeship/entrypoints/front-end-entrypoint.sh"]

  api:
    build:
      context: .
      dockerfile: codeship/dockerfiles/Back-End-Dockerfile
      args:
        BRANCH: "{{ .Branch }}"
      encrypted_args_file: codeship/encrypted-arg-files/build-args.encrypted
    encrypted_env_file: ./codeship/encrypted-env-files/back-end-env.encrypted
    depends_on:
      - postgres
      - redis
      - mailhog
      - sidekiq
    ports:
      - 4000
    volumes_from:
      - postgres
      - sidekiq
    entrypoint: ["sh", "./codeship/entrypoints/back-end-entrypoint.sh"]

  postgres:
    image: 'postgres:10.2-alpine'
    volumes:
      - pgdata:/var/lib/postgresql/data
    ports:
      - 5432
    command: postgres

  redis:
    image: redis
    volumes:
      - redis:/data
    command: redis-server

  sidekiq:
    build:
      context: .
      dockerfile: codeship/dockerfiles/Sidekiq-Dockerfile
      args:
        BRANCH: "{{ .Branch }}"
      encrypted_args_file: codeship/encrypted-arg-files/build-args.encrypted
    encrypted_env_file: ./codeship/encrypted-env-files/sidekiq-env.encrypted
    volumes:
      - .:/data-platform
    entrypoint: ["sh", "./codeship/entrypoints/sidekiq-entrypoint.sh"]

  mailhog:
    image: mailhog/mailhog:latest
    restart: always
    ports:
      - 1025
      - 8025

volumes:
  pgdata:
  redis:
